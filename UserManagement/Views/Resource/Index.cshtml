@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@{
    ViewBag.Title = "Resource List";
}

<!-- Add Resource Modal -->
<div class="modal fade" id="addResourceModal" tabindex="-1" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add Resource</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="addResourceModalBody">
                <!-- The partial view will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

<div class="d-sm-flex justify-content-between mb-3 mt-3">
    <h3 class="dashboard mb-3" style="color: #0066a7;">
        Resource Management
    </h3>

    <div class="seachbar d-flex justify-content-end">

        <div class="d-flex mt-1" style="position: relative; margin-right: 10px; height: 50px;">
            <input id="ResourceListSearch" type="text" class="form-control search-input d-flex" placeholder="Search">
            <img width="18" height="20" src="~/images/search-icon.svg" alt="..."
                class="search-icon d-flex" style="position: absolute; top: 15px; right: 17px;">
        </div>

        @if (User.IsInRole("Admin"))
        {
        
        <div class="d-flex">
            <p>
                <button data-bs-toggle="modal" data-bs-target="#addResourceModal" class="btn btn-primary btn-sm mt-1" style="height: 50px;" onclick="populateAddResourceModal(this)">+ Create Resource</button>
            </p>
        </div>
        }
    </div>
</div>

@* partial view to Resourcelist *@
<div id="resourcelist-container"></div>
</div>

@section Scripts {
<script>
    var sortColumn = 'Id'; 
    var sortDirection = 'asc';
    
    $(document).ready(function () {
        
        showLoader();

        setTimeout(function() {
            $.ajax({
                url: "/Resource/ResourceList",
                type: "GET",
                success: function (response) {
                    hideLoader();
                    $('#resourcelist-container').html(response); 
                },
                error: function (xhr) {
                    hideLoader();
                    console.error(xhr.responseText);
                    toastr.error("Error Resourcelist patialview");
                }
            });
        }, 500); 

         @* code for searchbar *@
        $("#ResourceListSearch").on("input", debounce(function () {
            loadResourceList(1, sortColumn, sortDirection);
        }, 500));

         @* code for sorting column wise*@
        $('#resourcelist-container').on('click','th i',function () {
            var column = $(this).data('column');
            var direction = $(this).data('direction');
            
            // Toggle sorting direction
            if (direction === 'asc') {
                $(this).data('direction', 'desc');
                $(this).siblings('i').data('direction', 'asc');
            } else {
                $(this).data('direction', 'asc');
                $(this).siblings('i').data('direction', 'desc');
            }
                
            // Set sorting parameters
            sortColumn = column;
            sortDirection = $(this).data('direction');
            
            loadResourceList(1, sortColumn, sortDirection); 
        });

        // Edit resource get method partial view
        $('#resourcelist-container').on('click','.editResourceBtn', function () {
            var resourceId = $(this).data('id'); 
            $.ajax({
            url: '@Url.Action("EditResource", "Resource")', 
            type: 'GET',
            data: { id:resourceId },
            success: function (response) {
                $('#editResourceModalBody').html(response);
            },
            error: function () {
                toastr.error("Error Fetch Resource Data.")
            }
            });
        });

        // Activate edit mode on cell click
        $('#resourcelist-container').on('click', '.editable-cell', function() {
            var cell = $(this);
            var displaySpan = cell.find('.display-mode');
            var editInput = cell.find('.edit-mode');

            editInput.data('original-value', editInput.val()); 

            displaySpan.hide();
            editInput.show().focus();
        });

         $('#resourcelist-container').on('blur', '.editable-cell .edit-mode', function() {
            var editInput = $(this);
            var cell = editInput.closest('.editable-cell');
            var displaySpan = cell.find('.display-mode');
            
            editInput.hide();
            displaySpan.show();
        });

        $('#resourcelist-container').on('change', '.editable-cell .edit-mode', function() {
            var editInput = $(this);
            var cell = editInput.closest('.editable-cell');
            var displaySpan = cell.find('.display-mode'); 

            const resourceId = cell.data('id');
            const fieldName = cell.data('field'); 
            const newValue = editInput.val().trim(); 

            const originalValue = editInput.data('original-value').trim();

            editInput.hide();
            displaySpan.show();

            let isValid = true;
            let errorMessage = "";
            
            if(fieldName === "Name") {
                if (newValue.length < 2 || newValue.length > 50) {
                    errorMessage = "Name must be between 2 and 50 characters.";
                    isValid = false;
                } else {
                    const regex = /^(?!.*[\x00-\x1F\x7F])[a-zA-Z0-9_]+(?: [a-zA-Z0-9_]+)*$/;
                    if (!regex.test(newValue)) {
                        errorMessage = "Name can only contain letters, numbers, underscores, and spaces. No leading/trailing spaces.";
                        isValid = false;
                    }
                }
            } else if(fieldName === "Quantity") {
                if (isNaN(newValue) || parseInt(newValue) < 0) {
                    errorMessage = "Please enter a valid quantity of zero or more.";
                    isValid = false;
                }
            } 

            if (!isValid) {
                toastr.error(errorMessage);
                displaySpan.text(originalValue); 
                editInput.val(originalValue); 
                return; 
            }

            if (newValue === originalValue) {
                displaySpan.text(newValue); 
                return; 
            }

            const dataToSend = {};
            dataToSend[fieldName] = newValue;

            $.ajax({
                url: `/Resource/UpdateResourceField?id=${resourceId}`,
                method: 'PATCH', 
                contentType: 'application/json', 
                data: JSON.stringify(dataToSend), 
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() 
                },
                success: function (response) {
                    if (response.success) {
                        toastr.success(`${fieldName} updated successfully.`);
                        displaySpan.text(newValue);
                    } else {
                        toastr.warning(response.message);
                        displaySpan.text(originalValue); 
                        editInput.val(originalValue); 
                    }
                },
                error: function (xhr, status, error) {
                    console.error(`AJAX Error updating ${fieldName}:`, status, error, xhr.responseText);
                    toastr.error(`Failed to update ${fieldName}. Please try again.`);
                    displaySpan.text(originalValue); 
                    editInput.val(originalValue); 
                }
            });
        });

        $('#resourcelist-container').on('click', '.bi-trash', function () {
            var resourceId = $(this).data('id');

            var deleteForm = $('#deleteResourceForm');
            deleteForm.attr('action', '/Resource/Delete/' + resourceId);
        });

         @if(TempData["error"] != null)
        {
            <text>toastr.error('@TempData["error"]');</text>
        }
        @if(TempData["success"] != null)
        {
            <text>toastr.success('@TempData["success"]');</text>
        }
        
    });

     //add resource
    function populateAddResourceModal(element){
        $.ajax({
            url: '@Url.Action("AddResource", "Resource")', 
            type: 'GET',
            success: function (response) {
                $('#addResourceModalBody').html(response);
            },
            error: function (error) {
                toastr.error("Error loading the partial view");
            }
        }); 
    }

    @* pagination script start *@  
                
    function loadResourceList(page, sortColumn = 'Id' , sortDirection = 'asc') {
        //get table list
        var pageSize = $("#ordersPerPage").val();
        var searchTerm = $("#ResourceListSearch").val().toLowerCase();

        showLoader();

        setTimeout(function() {
            $.ajax({
                url: "/Resource/ResourceList",
                type: 'GET',
                data: { page :page, pageSize:pageSize , search: searchTerm, sortColumn: sortColumn, sortDirection: sortDirection },
                success: function (data) {
                    hideLoader();
                    $('#resourcelist-container').html(data);
                     highlightActiveArrow(); 
                },
                error: function () {
                    hideLoader();
                    toastr.error('Error loading orderlist table.');
                }
            }); 
        }, 500);
    }

    function highlightActiveArrow() {
        $('#resourcelist-container').find('i[data-column]').removeClass('active-arrow');

        if (sortDirection === "asc") {
            $(`#resourcelist-container i[data-column="${sortColumn}"][data-direction="desc"]`).addClass('active-arrow');
        } else {
            $(`#resourcelist-container i[data-column="${sortColumn}"][data-direction="asc"]`).addClass('active-arrow');
        }
    }

    // Change Items Per Page
    function changeResourcelistPageSize(select) {
        loadResourceList(1,sortColumn, sortDirection);
    }

    // Change Page
    function changeResourcePage(newPage) {
        loadResourceList(newPage,sortColumn, sortDirection);
    }

    @* pagination script end *@
</script>
}
